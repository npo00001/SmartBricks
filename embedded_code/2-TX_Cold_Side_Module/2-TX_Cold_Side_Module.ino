#include <bluefruit.h>
#include <Adafruit_MAX31856.h>

// Pin assignments
#define THERMOCOUPLE_CS 10  // Chip select pin for the MAX31856 thermocouple
#define POWER 6  // Controls power to the circuit (LOW = off, HIGH = on)
#define ANALOG_VALUE_SCALE A0  // Analog output of the circuit
#define VBAT A6  // Battery voltage measurement pin

// Timing configurations (in milliseconds)
#define SLEEP_TIME 20000  // Time to sleep before transmitting data
#define BROADCAST_DURATION 1500  // Duration for making data available via Bluetooth
#define CIRCUIT_DELAY 500  // Delay before taking a sample after powering the circuit

// ADC settings
#define ADC_RESOLUTION 14  // ADC resolution (options: 8, 10, 12, 14 bits)
#define SAMPLES_PER_READING 5000  // Number of samples for averaging voltage readings

// Bluetooth data settings
#define DATA_LENGTH 25  // Length of string sent over Bluetooth (including null terminator)

// Analog to voltage lookup table
const int numEntries = 1649;  // Number of entries in the lookup table
float inputValues [numEntries] = {-0.015, -0.014, -0.013, -0.012, -0.011, -0.01, -0.00900000000000001, -0.00800000000000001, -0.00700000000000001, -0.00600000000000001, -0.00500000000000001, -0.004, -0.003, -0.002, -0.000999999999999999, 0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.01, 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017, 0.018, 0.019, 0.02, 0.021, 0.022, 0.023, 0.024, 0.025, 0.026, 0.027, 0.028, 0.029, 0.03, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.037, 0.038, 0.039, 0.04, 0.041, 0.042, 0.043, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.05, 0.051, 0.052, 0.053, 0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.06, 0.061, 0.062, 0.063, 0.064, 0.065, 0.066, 0.067, 0.069, 0.071, 0.073, 0.075, 0.077, 0.079, 0.081, 0.083, 0.085, 0.087, 0.089, 0.091, 0.093, 0.095, 0.097, 0.099, 0.101, 0.103, 0.105, 0.107, 0.109, 0.111, 0.113, 0.115, 0.117, 0.119, 0.121, 0.123, 0.125, 0.127, 0.129, 0.131, 0.133, 0.135, 0.137, 0.139, 0.141, 0.143, 0.145, 0.147, 0.149, 0.151, 0.153, 0.155, 0.157, 0.159, 0.161, 0.163, 0.165, 0.167, 0.169, 0.171, 0.173, 0.175, 0.177, 0.179, 0.181, 0.183, 0.185, 0.187, 0.189, 0.191, 0.193, 0.195, 0.197, 0.199, 0.201, 0.203, 0.205, 0.207, 0.209, 0.211, 0.213, 0.215, 0.217, 0.219, 0.221, 0.223, 0.225, 0.227, 0.229, 0.231, 0.233, 0.235, 0.237, 0.239, 0.241, 0.243, 0.245, 0.247, 0.249, 0.251, 0.253, 0.255, 0.257, 0.259, 0.261, 0.263, 0.265, 0.267, 0.269, 0.271, 0.273, 0.275, 0.277, 0.279, 0.281, 0.283, 0.285, 0.287, 0.289, 0.291, 0.293, 0.295, 0.297, 0.299, 0.301, 0.303, 0.305, 0.307, 0.309, 0.311, 0.313, 0.315, 0.317, 0.319, 0.321, 0.323, 0.325, 0.327, 0.329, 0.331, 0.333, 0.335, 0.337, 0.339, 0.341, 0.343, 0.345, 0.347, 0.349, 0.351, 0.353, 0.355, 0.357, 0.359, 0.361, 0.363, 0.365, 0.367, 0.369, 0.371, 0.373, 0.375, 0.377, 0.379, 0.381, 0.383, 0.385, 0.387, 0.389, 0.391, 0.393, 0.395, 0.397, 0.399, 0.401, 0.403, 0.405, 0.407, 0.409, 0.411, 0.413, 0.415, 0.417, 0.419, 0.421, 0.423, 0.425, 0.427, 0.429, 0.431, 0.433, 0.435, 0.437, 0.439, 0.441, 0.443, 0.445, 0.447, 0.449, 0.451, 0.453, 0.455, 0.457, 0.459, 0.461, 0.463, 0.465, 0.467, 0.469, 0.471, 0.473, 0.475, 0.477, 0.479, 0.481, 0.483, 0.485, 0.487, 0.489, 0.491, 0.493, 0.495, 0.497, 0.499, 0.501, 0.503, 0.505, 0.507, 0.509, 0.511, 0.513, 0.515, 0.517, 0.519, 0.521, 0.523, 0.525, 0.527, 0.529, 0.531, 0.533, 0.535, 0.537, 0.539, 0.541, 0.543, 0.545, 0.547, 0.549, 0.551, 0.553, 0.555, 0.557, 0.559, 0.561, 0.563, 0.565, 0.567, 0.569, 0.571, 0.573, 0.575, 0.577, 0.579, 0.581, 0.583, 0.585, 0.587, 0.589, 0.591, 0.593, 0.595, 0.597, 0.599, 0.601, 0.603, 0.605, 0.607, 0.609, 0.611, 0.613, 0.615, 0.617, 0.619, 0.621, 0.623, 0.625, 0.627, 0.629, 0.631000000000001, 0.633000000000001, 0.635000000000001, 0.637000000000001, 0.639000000000001, 0.641000000000001, 0.643000000000001, 0.645000000000001, 0.647000000000001, 0.649000000000001, 0.651000000000001, 0.653000000000001, 0.655000000000001, 0.657000000000001, 0.659000000000001, 0.661000000000001, 0.663000000000001, 0.665000000000001, 0.667000000000001, 0.669000000000001, 0.671000000000001, 0.673000000000001, 0.675000000000001, 0.677000000000001, 0.679000000000001, 0.681000000000001, 0.683000000000001, 0.685000000000001, 0.687000000000001, 0.689000000000001, 0.691000000000001, 0.693000000000001, 0.695000000000001, 0.697000000000001, 0.699000000000001, 0.701000000000001, 0.703000000000001, 0.705000000000001, 0.707000000000001, 0.709000000000001, 0.711000000000001, 0.713000000000001, 0.715000000000001, 0.717000000000001, 0.719000000000001, 0.721000000000001, 0.723000000000001, 0.725000000000001, 0.727000000000001, 0.729000000000001, 0.731000000000001, 0.733000000000001, 0.735000000000001, 0.737000000000001, 0.739000000000001, 0.741000000000001, 0.743000000000001, 0.745000000000001, 0.747000000000001, 0.749000000000001, 0.751000000000001, 0.753000000000001, 0.755000000000001, 0.757000000000001, 0.759000000000001, 0.761000000000001, 0.763000000000001, 0.765000000000001, 0.767000000000001, 0.769000000000001, 0.771000000000001, 0.773000000000001, 0.775000000000001, 0.777000000000001, 0.779000000000001, 0.781000000000001, 0.783000000000001, 0.785000000000001, 0.787000000000001, 0.789000000000001, 0.791000000000001, 0.793000000000001, 0.795000000000001, 0.797000000000001, 0.799000000000001, 0.801000000000001, 0.803000000000001, 0.805000000000001, 0.807000000000001, 0.809000000000001, 0.811000000000001, 0.813000000000001, 0.815000000000001, 0.817000000000001, 0.819000000000001, 0.821000000000001, 0.823000000000001, 0.825000000000001, 0.827000000000001, 0.829000000000001, 0.831000000000001, 0.833000000000001, 0.835000000000001, 0.837000000000001, 0.839000000000001, 0.841000000000001, 0.843000000000001, 0.845000000000001, 0.847000000000001, 0.849000000000001, 0.851000000000001, 0.853000000000001, 0.855000000000001, 0.857000000000001, 0.859000000000001, 0.861000000000001, 0.863000000000001, 0.865000000000001, 0.867000000000001, 0.869000000000001, 0.871000000000001, 0.873000000000001, 0.875000000000001, 0.877000000000001, 0.879000000000001, 0.881000000000001, 0.883000000000001, 0.885000000000001, 0.887000000000001, 0.889000000000001, 0.891000000000001, 0.893000000000001, 0.895000000000001, 0.897000000000001, 0.899000000000001, 0.901000000000001, 0.903000000000001, 0.905000000000001, 0.907000000000001, 0.909000000000001, 0.911000000000001, 0.913000000000001, 0.915000000000001, 0.917000000000001, 0.919000000000001, 0.921000000000001, 0.923000000000001, 0.925000000000001, 0.927000000000001, 0.929000000000001, 0.931000000000001, 0.933000000000001, 0.935000000000001, 0.937000000000001, 0.939000000000001, 0.941000000000001, 0.943000000000001, 0.945000000000001, 0.947000000000001, 0.949000000000001, 0.951000000000001, 0.953000000000001, 0.955000000000001, 0.957000000000001, 0.959000000000001, 0.961000000000001, 0.963000000000001, 0.965000000000001, 0.967000000000001, 0.969000000000001, 0.971000000000001, 0.973000000000001, 0.975000000000001, 0.977000000000001, 0.979000000000001, 0.981000000000001, 0.983000000000001, 0.985000000000001, 0.987000000000001, 0.989000000000001, 0.991000000000001, 0.993000000000001, 0.995000000000001, 0.997000000000001, 0.999000000000001, 1.001, 1.003, 1.005, 1.007, 1.009, 1.011, 1.013, 1.015, 1.017, 1.019, 1.021, 1.023, 1.025, 1.027, 1.029, 1.031, 1.033, 1.035, 1.037, 1.039, 1.041, 1.043, 1.045, 1.047, 1.049, 1.051, 1.053, 1.055, 1.057, 1.059, 1.061, 1.063, 1.065, 1.067, 1.069, 1.071, 1.073, 1.075, 1.077, 1.079, 1.081, 1.083, 1.085, 1.087, 1.089, 1.091, 1.093, 1.095, 1.097, 1.099, 1.101, 1.103, 1.105, 1.107, 1.109, 1.111, 1.113, 1.115, 1.117, 1.119, 1.121, 1.123, 1.125, 1.127, 1.129, 1.131, 1.133, 1.135, 1.137, 1.139, 1.141, 1.143, 1.145, 1.147, 1.149, 1.151, 1.153, 1.155, 1.157, 1.159, 1.161, 1.163, 1.165, 1.167, 1.169, 1.171, 1.173, 1.175, 1.177, 1.179, 1.181, 1.183, 1.185, 1.187, 1.189, 1.191, 1.193, 1.195, 1.197, 1.199, 1.201, 1.203, 1.205, 1.207, 1.209, 1.211, 1.213, 1.215, 1.217, 1.219, 1.221, 1.223, 1.225, 1.227, 1.229, 1.231, 1.233, 1.235, 1.237, 1.239, 1.241, 1.243, 1.245, 1.247, 1.249, 1.251, 1.253, 1.255, 1.257, 1.259, 1.261, 1.263, 1.265, 1.267, 1.269, 1.271, 1.273, 1.275, 1.277, 1.279, 1.281, 1.283, 1.285, 1.287, 1.289, 1.291, 1.293, 1.295, 1.297, 1.299, 1.301, 1.303, 1.305, 1.307, 1.309, 1.311, 1.313, 1.315, 1.317, 1.319, 1.321, 1.323, 1.325, 1.327, 1.329, 1.331, 1.333, 1.335, 1.337, 1.339, 1.341, 1.343, 1.345, 1.347, 1.349, 1.351, 1.353, 1.355, 1.357, 1.359, 1.361, 1.363, 1.365, 1.367, 1.369, 1.371, 1.373, 1.375, 1.377, 1.379, 1.381, 1.383, 1.385, 1.387, 1.389, 1.391, 1.393, 1.395, 1.397, 1.399, 1.401, 1.403, 1.405, 1.407, 1.409, 1.411, 1.413, 1.415, 1.417, 1.419, 1.421, 1.423, 1.425, 1.427, 1.429, 1.431, 1.433, 1.435, 1.437, 1.439, 1.441, 1.443, 1.445, 1.447, 1.449, 1.451, 1.453, 1.455, 1.457, 1.459, 1.461, 1.463, 1.465, 1.467, 1.469, 1.471, 1.473, 1.475, 1.477, 1.479, 1.481, 1.483, 1.485, 1.487, 1.489, 1.491, 1.493, 1.495, 1.497, 1.499, 1.501, 1.503, 1.505, 1.507, 1.509, 1.511, 1.513, 1.515, 1.517, 1.519, 1.521, 1.523, 1.525, 1.527, 1.529, 1.531, 1.533, 1.535, 1.537, 1.539, 1.541, 1.543, 1.545, 1.547, 1.549, 1.551, 1.553, 1.555, 1.557, 1.559, 1.561, 1.563, 1.565, 1.567, 1.569, 1.571, 1.573, 1.575, 1.577, 1.579, 1.581, 1.583, 1.585, 1.587, 1.589, 1.591, 1.593, 1.595, 1.597, 1.599, 1.601, 1.603, 1.605, 1.607, 1.609, 1.611, 1.613, 1.615, 1.617, 1.619, 1.621, 1.623, 1.625, 1.627, 1.629, 1.631, 1.633, 1.635, 1.637, 1.639, 1.641, 1.643, 1.645, 1.647, 1.649, 1.651, 1.653, 1.655, 1.657, 1.659, 1.661, 1.663, 1.665, 1.667, 1.669, 1.671, 1.673, 1.675, 1.677, 1.679, 1.681, 1.683, 1.685, 1.687, 1.689, 1.691, 1.693, 1.695, 1.697, 1.699, 1.701, 1.703, 1.705, 1.707, 1.709, 1.711, 1.713, 1.715, 1.717, 1.719, 1.721, 1.723, 1.725, 1.727, 1.729, 1.731, 1.733, 1.735, 1.737, 1.739, 1.741, 1.743, 1.745, 1.747, 1.749, 1.751, 1.753, 1.755, 1.757, 1.759, 1.761, 1.763, 1.765, 1.767, 1.769, 1.771, 1.773, 1.775, 1.777, 1.779, 1.781, 1.783, 1.785, 1.787, 1.789, 1.791, 1.793, 1.795, 1.797, 1.799, 1.801, 1.803, 1.805, 1.807, 1.809, 1.811, 1.813, 1.815, 1.817, 1.819, 1.821, 1.823, 1.825, 1.827, 1.829, 1.831, 1.833, 1.835, 1.837, 1.839, 1.841, 1.843, 1.845, 1.847, 1.849, 1.851, 1.853, 1.855, 1.857, 1.859, 1.861, 1.863, 1.865, 1.867, 1.869, 1.871, 1.873, 1.875, 1.877, 1.879, 1.881, 1.883, 1.885, 1.887, 1.889, 1.891, 1.893, 1.895, 1.897, 1.899, 1.901, 1.903, 1.905, 1.907, 1.909, 1.911, 1.913, 1.915, 1.917, 1.919, 1.921, 1.923, 1.925, 1.927, 1.929, 1.931, 1.933, 1.935, 1.937, 1.939, 1.941, 1.943, 1.945, 1.947, 1.949, 1.951, 1.953, 1.955, 1.957, 1.959, 1.961, 1.963, 1.965, 1.967, 1.969, 1.971, 1.973, 1.975, 1.977, 1.979, 1.981, 1.983, 1.985, 1.987, 1.989, 1.991, 1.993, 1.995, 1.997, 1.999, 2.001, 2.003, 2.005, 2.007, 2.009, 2.011, 2.013, 2.015, 2.017, 2.019, 2.021, 2.023, 2.025, 2.027, 2.029, 2.031, 2.033, 2.035, 2.037, 2.039, 2.041, 2.043, 2.045, 2.047, 2.049, 2.051, 2.053, 2.055, 2.057, 2.059, 2.061, 2.063, 2.065, 2.067, 2.069, 2.071, 2.073, 2.075, 2.077, 2.079, 2.081, 2.083, 2.085, 2.087, 2.089, 2.091, 2.093, 2.095, 2.097, 2.099, 2.101, 2.103, 2.105, 2.107, 2.109, 2.111, 2.113, 2.115, 2.117, 2.119, 2.121, 2.123, 2.125, 2.127, 2.129, 2.131, 2.133, 2.135, 2.137, 2.139, 2.141, 2.143, 2.145, 2.147, 2.149, 2.151, 2.153, 2.155, 2.157, 2.159, 2.161, 2.163, 2.165, 2.167, 2.169, 2.171, 2.173, 2.175, 2.177, 2.179, 2.181, 2.183, 2.185, 2.187, 2.189, 2.191, 2.193, 2.195, 2.197, 2.199, 2.201, 2.203, 2.205, 2.207, 2.209, 2.211, 2.213, 2.215, 2.217, 2.219, 2.221, 2.223, 2.225, 2.227, 2.229, 2.231, 2.233, 2.235, 2.237, 2.239, 2.241, 2.243, 2.245, 2.247, 2.249, 2.251, 2.253, 2.255, 2.257, 2.259, 2.261, 2.263, 2.265, 2.267, 2.269, 2.271, 2.273, 2.275, 2.277, 2.279, 2.281, 2.283, 2.285, 2.287, 2.289, 2.291, 2.293, 2.295, 2.297, 2.299, 2.301, 2.303, 2.305, 2.307, 2.309, 2.311, 2.313, 2.315, 2.317, 2.319, 2.321, 2.323, 2.325, 2.327, 2.329, 2.331, 2.333, 2.335, 2.337, 2.339, 2.341, 2.343, 2.345, 2.347, 2.349, 2.351, 2.353, 2.355, 2.357, 2.359, 2.361, 2.363, 2.365, 2.367, 2.369, 2.371, 2.373, 2.375, 2.377, 2.379, 2.381, 2.383, 2.385, 2.387, 2.389, 2.391, 2.393, 2.395, 2.397, 2.399, 2.401, 2.403, 2.405, 2.407, 2.409, 2.411, 2.413, 2.415, 2.417, 2.419, 2.421, 2.423, 2.425, 2.427, 2.429, 2.431, 2.433, 2.435, 2.437, 2.439, 2.441, 2.443, 2.445, 2.447, 2.449, 2.451, 2.453, 2.455, 2.457, 2.459, 2.461, 2.463, 2.465, 2.467, 2.469, 2.471, 2.473, 2.475, 2.477, 2.479, 2.481, 2.483, 2.485, 2.487, 2.489, 2.491, 2.493, 2.495, 2.497, 2.499, 2.501, 2.503, 2.505, 2.507, 2.509, 2.511, 2.513, 2.515, 2.517, 2.519, 2.521, 2.523, 2.525, 2.527, 2.529, 2.531, 2.533, 2.535, 2.537, 2.539, 2.541, 2.543, 2.545, 2.547, 2.549, 2.551, 2.553, 2.555, 2.557, 2.559, 2.561, 2.563, 2.565, 2.567, 2.569, 2.571, 2.573, 2.575, 2.577, 2.579, 2.581, 2.583, 2.585, 2.587, 2.589, 2.591, 2.593, 2.595, 2.597, 2.599, 2.601, 2.603, 2.605, 2.607, 2.609, 2.611, 2.613, 2.615, 2.617, 2.619, 2.621, 2.623, 2.625, 2.627, 2.629, 2.631, 2.633, 2.635, 2.637, 2.639, 2.641, 2.643, 2.645, 2.647, 2.649, 2.651, 2.653, 2.655, 2.657, 2.659, 2.661, 2.663, 2.665, 2.667, 2.669, 2.671, 2.673, 2.675, 2.677, 2.679, 2.681, 2.683, 2.685, 2.687, 2.689, 2.691, 2.693, 2.695, 2.697, 2.699, 2.701, 2.703, 2.705, 2.707, 2.709, 2.711, 2.713, 2.715, 2.717, 2.719, 2.721, 2.723, 2.725, 2.727, 2.729, 2.731, 2.733, 2.735, 2.737, 2.739, 2.741, 2.743, 2.745, 2.747, 2.749, 2.751, 2.753, 2.755, 2.757, 2.759, 2.761, 2.763, 2.765, 2.767, 2.769, 2.771, 2.773, 2.775, 2.777, 2.779, 2.781, 2.783, 2.785, 2.787, 2.789, 2.791, 2.793, 2.795, 2.797, 2.799, 2.801, 2.803, 2.805, 2.807, 2.809, 2.811, 2.813, 2.815, 2.817, 2.819, 2.821, 2.823, 2.825, 2.827, 2.829, 2.831, 2.833, 2.835, 2.837, 2.839, 2.841, 2.843, 2.845, 2.847, 2.849, 2.851, 2.853, 2.855, 2.857, 2.859, 2.861, 2.863, 2.865, 2.867, 2.869, 2.871, 2.873, 2.875, 2.877, 2.879, 2.881, 2.883, 2.885, 2.887, 2.889, 2.891, 2.893, 2.895, 2.897, 2.899, 2.901, 2.903, 2.905, 2.907, 2.909, 2.911, 2.913, 2.915, 2.917, 2.919, 2.921, 2.923, 2.925, 2.927, 2.929, 2.931, 2.933, 2.935, 2.937, 2.939, 2.941, 2.943, 2.945, 2.947, 2.949, 2.951, 2.953, 2.955, 2.957, 2.959, 2.961, 2.963, 2.965, 2.967, 2.969, 2.971, 2.973, 2.975, 2.977, 2.979, 2.981, 2.983, 2.985, 2.987, 2.989, 2.991, 2.993, 2.995, 2.997, 2.999, 3.001, 3.003, 3.005, 3.007, 3.009, 3.011, 3.013, 3.015, 3.017, 3.019, 3.021, 3.023, 3.025, 3.027, 3.029, 3.031, 3.033, 3.035, 3.037, 3.039, 3.041, 3.043, 3.045, 3.047, 3.049, 3.051, 3.053, 3.055, 3.057, 3.059, 3.061, 3.063, 3.065, 3.067, 3.069, 3.071, 3.073, 3.075, 3.077, 3.079, 3.081, 3.083, 3.085, 3.087, 3.089, 3.091, 3.093, 3.095, 3.097, 3.099, 3.101, 3.103, 3.105, 3.107, 3.109, 3.111, 3.113, 3.115, 3.117, 3.119, 3.121, 3.123, 3.125, 3.127, 3.129, 3.131, 3.133, 3.135, 3.137, 3.139, 3.141, 3.143, 3.145, 3.147, 3.149, 3.151, 3.153, 3.155, 3.157, 3.159, 3.161, 3.163, 3.165, 3.167, 3.169, 3.171, 3.173, 3.175, 3.177, 3.179, 3.181, 3.183, 3.185, 3.187, 3.189, 3.191, 3.193, 3.195, 3.197, 3.199};
float outputValues [numEntries] = {-0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27, -0.26, -0.25, -0.24, -0.16, -0.15, -0.14, -0.13, -0.12, -0.11, -0.0999999999999999, -0.0899999999999999, -0.0799999999999999, -0.0699999999999999, -0.06, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.410000000000001, 0.420000000000001, 0.430000000000001, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566};

// Bluetooth UUID and data buffer
char UUID[37] = "01000100-0100-1111-0100-0101ffD0E004"; // Unique Bluetooth UUID for the service
char data[DATA_LENGTH] = "NoData"; // Placeholder data to be sent via Bluetooth
int currentRange = 0; // Stores the current range value

// Bluetooth service and characteristic
BLEService sensorService = BLEService(UUID);
BLECharacteristic sensorCharacteristic = BLECharacteristic(0x1235);
BLEDis bledis; //device information serive (Model, Manufacturer,...)
Adafruit_MAX31856 maxthermo = Adafruit_MAX31856(THERMOCOUPLE_CS);

String my_ans;

void setup()
{
  // Initialize thermocouple sensor
  maxthermo.begin();
  maxthermo.setThermocoupleType(MAX31856_TCTYPE_K);

  // Identify thermocouple type
  switch (maxthermo.getThermocoupleType() ) {
    case MAX31856_TCTYPE_B: my_ans="B"; break;
    case MAX31856_TCTYPE_E: my_ans="E"; break;
    case MAX31856_TCTYPE_J: my_ans="J"; break;
    case MAX31856_TCTYPE_K: my_ans="K"; break;
    case MAX31856_TCTYPE_N: my_ans="N"; break;
    case MAX31856_TCTYPE_R: my_ans="R"; break;
    case MAX31856_TCTYPE_S: my_ans="S"; break;
    case MAX31856_TCTYPE_T: my_ans="T"; break;
    case MAX31856_VMODE_G8: my_ans="No"; break;
    case MAX31856_VMODE_G32: my_ans="No"; break;
    default: my_ans="?"; break;
  }

  // Initialize Bluetooth
  Bluefruit.begin();
  Bluefruit.Periph.setConnectCallback(connect_callback); //set ISR for when connection is made
  Bluefruit.Periph.setDisconnectCallback(disconnect_callback); //set ISR for when disconnection occurs

  // Set device information
  bledis.setManufacturer("Adafruit Industries");
  bledis.setModel("Bluefruit Feather52");
  bledis.begin();

  setupService();
  startAdv();

  //set digital pins as outputs
  pinMode(POWER, OUTPUT);

  // Initially power off the circuit
  digitalWrite(POWER, LOW);

  // Set starting range for analog readings
  analogReadResolution(ADC_RESOLUTION); // Set starting range for analog readings
  analogReference(AR_VDD4); // Set reference voltage equal to VDD (3.3V)

  //turn off LEDs (if present)
  digitalWrite(LED_BLUE, LOW);
  digitalWrite(LED_RED, LOW);
  //digitalWrite(PIN_NEOPIXEL, LOW);

}

void setupService(void) {
  // Initialize the sensor service
  sensorService.begin();

  // Configure the sensor characteristic (fixed length data)
  sensorCharacteristic.setFixedLen(DATA_LENGTH); // sets data length of data to send
  sensorCharacteristic.setProperties(CHR_PROPS_READ); // Make characteristic readable
  sensorCharacteristic.setPermission(SECMODE_OPEN, SECMODE_OPEN); // Open for read/write

  // Add the characteristic to the service
  sensorCharacteristic.begin();
}

void startAdv(void) {
  // Start advertising the Bluetooth service with the required flags
  Bluefruit.Advertising.addFlags(BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE);
  Bluefruit.Advertising.addTxPower(); // Add transmit power info to advertisement

  // Add the sensor service to the advertisement
  Bluefruit.Advertising.addService(sensorService);

  // Include device name in the advertisement
  Bluefruit.Advertising.addName();

  // Configure advertising behavior
  Bluefruit.Advertising.restartOnDisconnect(false); // Don't resume advertising after disconnection
  Bluefruit.Advertising.setInterval(32, 244); // Advertising intervals (fast and slow)
}

void connect_callback(uint16_t conn_handle)
{
  digitalWrite(LED_BLUE, LOW); // Turn off the LED when connected

  // Read and measure voltages
  digitalWrite(POWER, HIGH); // Power on the circuit
  float measLog = 0;

  // Delay before reading the Wheatstone bridge voltage
  delay(CIRCUIT_DELAY);
  float Analog_Volt_Value = 0; // Why is this zero?

  // Find the closest input values to determine the output
  int lowerIdx = 0;
  int upperIdx = numEntries - 1;

  for (int i = 1; i < numEntries; i++) {
    if (Analog_Volt_Value <= inputValues[i]) {
      upperIdx = i;
      break;
      }
      lowerIdx = i;
  }

  // Interpolate between the closest values
  float lowerOutput = outputValues[lowerIdx];
  float upperOutput = outputValues[upperIdx];
  float averageOutput = (lowerOutput + upperOutput) / 2;

  // Measure battery voltage
  float measVBat = getBatV(SAMPLES_PER_READING);

  // Read thermocouple temperature
  float thermocoupleTemp = maxthermo.readThermocoupleTemperature();

  digitalWrite(POWER, LOW); // Power off the circuit

  // Prepare data to be sent over Bluetooth
  snprintf(data, DATA_LENGTH, "%.5f %d %.1f %.5f", Analog_Volt_Value, currentRange, thermocoupleTemp, measVBat);
  sensorCharacteristic.write(data); // Write data to Bluetooth characteristic
  //Serial.print(data);  

  // Get the reference to current connection
  BLEConnection* connection = Bluefruit.Connection(conn_handle);
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason) {
  // Stop advertising when disconnected
  Bluefruit.Advertising.stop();
  delay(SLEEP_TIME); // Sleep for a period before attempting to advertise again
}

void loop()
{
  // If not connected, start advertising
  if (!Bluefruit.connected()) {
    Bluefruit.Advertising.start(BROADCAST_DURATION); // Start advertising for a set duration
    unsigned long start_time = millis();

    // Stop advertising if a connection is made within the time limit
    while (millis() - start_time <=  BROADCAST_DURATION) {
      if (Bluefruit.connected()) {
        break;
      }
    }

    // Stop advertising and go to sleep if no central device connects in time
    Bluefruit.Advertising.stop();
    delay(SLEEP_TIME); // Sleep before trying to advertise again
  }
}

// Read the voltage at pin 'analogPin' and return the average value
float readVoltageAvg(int numSamples, int analogPin)
{
  delay(100); // Short delay before starting the read

  // Sum the values of 'numSamples' readings from the analog pin
  long total = 0;
  for (int i = 0; i < numSamples; i++)
    total += analogRead(analogPin);

  // Compute the average voltage from the readings
  float average = (float) total / (float) numSamples;
  float voltage = average * (3.3 / (float)(pow(2, ADC_RESOLUTION) - 1)); // Convert to voltage using reference voltage

  return voltage;
}

// Measure and return the battery voltage
float getBatV(int numSamples) {
  // Assume 4.2V is full and 3.2V is empty for a typical Li-ion battery

  long total = 0;
  for (int i = 0; i < numSamples; i++)
    total += analogRead(VBAT); // Read battery voltage pin
  
  float measuredvbat = (float) total / (float)numSamples;
  measuredvbat *= 2.0;    // The value is halved internally, so multiply by 2
  measuredvbat *= 3.3;    // Multiply by reference voltage (3.3V)
  measuredvbat /= (pow(2, ADC_RESOLUTION) - 1); // Convert to actual voltage

  return measuredvbat;
}
